#!/bin/bash
# Pre-commit hook to prevent new sorries from being committed

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Checking for sorries in staged files..."

# Get the list of staged .lean files
STAGED_LEAN_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.lean$')

if [ -z "$STAGED_LEAN_FILES" ]; then
    echo "‚úÖ No Lean files staged for commit"
    exit 0
fi

# Count sorries in staged content
SORRY_COUNT=0
SORRY_FILES=""

for file in $STAGED_LEAN_FILES; do
    # Check the staged version of the file (not the working directory version)
    STAGED_SORRIES=$(git diff --cached -U0 "$file" | grep '^+' | grep -c 'sorry')
    
    if [ "$STAGED_SORRIES" -gt 0 ]; then
        SORRY_COUNT=$((SORRY_COUNT + STAGED_SORRIES))
        SORRY_FILES="$SORRY_FILES\n  - $file (+$STAGED_SORRIES sorries)"
    fi
done

# Check if we're adding new sorries
if [ "$SORRY_COUNT" -gt 0 ]; then
    echo -e "${RED}‚ùå Commit blocked: Found $SORRY_COUNT new sorry(s) in staged files:${NC}"
    echo -e "$SORRY_FILES"
    echo ""
    echo -e "${YELLOW}To bypass this check (not recommended), use:${NC}"
    echo "  git commit --no-verify"
    echo ""
    echo -e "${YELLOW}Better options:${NC}"
    echo "  1. Complete the proofs before committing"
    echo "  2. Create a feature branch for work-in-progress"
    echo "  3. Use 'admit' temporarily and create an issue"
    exit 1
fi

# Also run a full sorry check to ensure we're not increasing total count
echo "üìä Running full sorry count check..."

if [ -f "./scripts/check_sorry.py" ]; then
    python3 ./scripts/check_sorry.py > /tmp/sorry_check.txt 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Sorry check failed:${NC}"
        cat /tmp/sorry_check.txt
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ No new sorries detected. Commit approved!${NC}"
exit 0 